<!-- <?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/security 
			http://www.springframework.org/schema/security/spring-security-3.0.xsd">
	
    <security:http auto-config="true" use-expressions="true">
        <intercept-url pattern="/**" access="hasRole('ROLE_USER')" />
        <logout logout-url="/" />
    </http>
 
    <authentication-manager alias="authenticationManager">
        <authentication-provider ref="customAuthenticationProvider" />
    </authentication-manager>
     
</beans:beans> -->
 <beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd">
	
	
	<http use-expressions="true">
		<csrf disabled="true"/>
        <form-login login-page="/service/home"
                    login-processing-url="/j_spring_security_check"
                    default-target-url="/service/main"
                    authentication-failure-url="/service/login?error=true"
                    always-use-default-target="true" />
        <session-management invalid-session-url="/service/home"/>
        <logout invalidate-session="true" logout-success-url="/service/home" logout-url="/service/logout"/>
        
        <intercept-url pattern="/" access="permitAll"/>
        <intercept-url pattern="/service/home"  access="permitAll"/>
        <intercept-url pattern="/service/about"  access="permitAll"/>
		<intercept-url pattern="/service/login"  access="permitAll"/>
		<intercept-url pattern="/service/searchlist"  access="permitAll"/>
		<intercept-url pattern="/service/homepg"  access="permitAll"/>
		<intercept-url pattern="/service/registration" access="permitAll"/>
		<intercept-url pattern="/service/write" access="hasAnyRole('ROLE_ADMIN','ROLE_SUPER_ADMIN','ROLE_BLOGGER')"/>
		<intercept-url pattern="/service/mypage" access="hasAnyRole('ROLE_ADMIN','ROLE_SUPER_ADMIN','ROLE_BLOGGER')"/>
		<intercept-url pattern="/service/main" access="hasAnyRole('ROLE_ADMIN','ROLE_SUPER_ADMIN','ROLE_BLOGGER')"/>
		<intercept-url pattern="/service/upfile/*" access="hasAnyRole('ROLE_ADMIN','ROLE_SUPER_ADMIN','ROLE_BLOGGER')"/>
		<intercept-url pattern="/service/maintainimg" access="hasAnyRole('ROLE_ADMIN','ROLE_SUPER_ADMIN','ROLE_BLOGGER')"/>
	    </http>
	    
		<!-- <http pattern="/rest_api/**" create-session="stateless"  authentication-manager-ref="serviceCredsAuthMgr">
		  <http-basic />
		</http>
		 -->
		
<!-- 
	Declare an authentication-manager to use a custom userDetailsService
  -->
  <beans:bean id="userDao" class="com.coderszone.authentication.dao.impl.UserDaoImpl">
      <beans:property name="dataSource" ref="dataSource" />
       <beans:property name="queryForUserByUserId" value="SELECT * FROM codersdb.user u where user_name=?;"/>
	   <beans:property name="queryForRolesByUserId" value="select urm.role_id from codersdb.user_role_map urm where urm.user_id=?;"/>
  </beans:bean>
  
  <beans:bean id="userService" class="com.coderszone.authentication.service.UserService">
       <beans:property name="userDao" ref="userDao"/>
  </beans:bean>
  <beans:bean id="customAuthenticationProvider" class="com.coderszone.authentication.security.CustomAuthenticationProvider">
    <beans:property name="userService" ref="userService" />
</beans:bean>
  <authentication-manager erase-credentials="true">
	        <authentication-provider ref="customAuthenticationProvider">
	        		<!-- <security:password-encoder ref="passwordEncoder"/> -->
	        </authentication-provider>
	</authentication-manager>
	
	<!--  Use a Md5 encoder since the user's passwords are stored as Md5 in the database
	<bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>

	 An in-memory list of users. No need to access an external database layer.
		    See Spring Security 3.1 Reference 5.2.1 In-Memory Authentication
	 john's password is admin, while jane;s password is user 
	 <security:user-service id="userDetailsService">
	    <security:user name="john" password="21232f297a57a5a743894a0e4a801fc3" authorities="ROLE_USER, ROLE_ADMIN" />
	    <security:user name="jane" password="ee11cbb19052e40b07aac0ca060c23ee" authorities="ROLE_USER" />
	  </security:user-service>
 -->
 
 <!-- <beans:bean id="deviceUserDao" class="com.coderszone.rest.dao.impl.UserDaoImpl">
      <beans:property name="dataSource" ref="dataSource" />
       <beans:property name="queryForUserByUserId" value="SELECT * FROM codersdb.user u where user_name=?;"/>
	   <beans:property name="queryForRolesByUserId" value="select urm.role_id from codersdb.user_role_map urm where urm.user_id=?;"/>
  </beans:bean>
  <beans:bean id="deviceUserService" class="com.coderszone.rest.service.UserService">
       <beans:property name="userDao" ref="deviceUserDao"/>
  </beans:bean>
  <beans:bean id="customDeviceAuthenticationProvider" class="com.coderszone.rest.security.CustomAuthenticationProvider">
    <beans:property name="userService" ref="deviceUserService" />
</beans:bean>
  <authentication-manager id="serviceCredsAuthMgr">
	        <authentication-provider ref="customDeviceAuthenticationProvider">
	        		<security:password-encoder ref="passwordEncoder"/>
	        </authentication-provider>
	</authentication-manager> -->
	
</beans:beans> 
